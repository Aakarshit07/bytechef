/* tslint:disable */
/* eslint-disable */
/**
 * The Platform Configuration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EvaluateWorkflowNodeDisplayConditionRequestModel,
  GetWorkflowNodeDescription200ResponseModel,
  OptionModel,
  PropertyModel,
  WorkflowNodeOutputModel,
} from '../models/index';
import {
    EvaluateWorkflowNodeDisplayConditionRequestModelFromJSON,
    EvaluateWorkflowNodeDisplayConditionRequestModelToJSON,
    GetWorkflowNodeDescription200ResponseModelFromJSON,
    GetWorkflowNodeDescription200ResponseModelToJSON,
    OptionModelFromJSON,
    OptionModelToJSON,
    PropertyModelFromJSON,
    PropertyModelToJSON,
    WorkflowNodeOutputModelFromJSON,
    WorkflowNodeOutputModelToJSON,
} from '../models/index';

export interface EvaluateWorkflowNodeDisplayConditionRequest {
    id: string;
    workflowNodeName: string;
    evaluateWorkflowNodeDisplayConditionRequestModel?: EvaluateWorkflowNodeDisplayConditionRequestModel;
}

export interface GetWorkflowNodeDescriptionRequest {
    id: string;
    workflowNodeName: string;
}

export interface GetWorkflowNodeDynamicPropertiesRequest {
    id: string;
    workflowNodeName: string;
    propertyName: string;
}

export interface GetWorkflowNodeOptionsRequest {
    id: string;
    workflowNodeName: string;
    propertyName: string;
    searchText?: string;
}

export interface GetWorkflowNodeOutputRequest {
    id: string;
    workflowNodeName: string;
}

export interface GetWorkflowNodeOutputsRequest {
    id: string;
    lastWorkflowNodeName?: string;
}

/**
 * 
 */
export class WorkflowNodeApi extends runtime.BaseAPI {

    /**
     * Evaluate display condition for an action or trigger property.
     * Evaluate display condition for an action or trigger property
     */
    async evaluateWorkflowNodeDisplayConditionRaw(requestParameters: EvaluateWorkflowNodeDisplayConditionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling evaluateWorkflowNodeDisplayCondition.');
        }

        if (requestParameters.workflowNodeName === null || requestParameters.workflowNodeName === undefined) {
            throw new runtime.RequiredError('workflowNodeName','Required parameter requestParameters.workflowNodeName was null or undefined when calling evaluateWorkflowNodeDisplayCondition.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/workflows/{id}/{workflowNodeName}/display-condition`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters.workflowNodeName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EvaluateWorkflowNodeDisplayConditionRequestModelToJSON(requestParameters.evaluateWorkflowNodeDisplayConditionRequestModel),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Evaluate display condition for an action or trigger property.
     * Evaluate display condition for an action or trigger property
     */
    async evaluateWorkflowNodeDisplayCondition(requestParameters: EvaluateWorkflowNodeDisplayConditionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.evaluateWorkflowNodeDisplayConditionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an action description shown in the editor.
     * Get an action description shown in the editor
     */
    async getWorkflowNodeDescriptionRaw(requestParameters: GetWorkflowNodeDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetWorkflowNodeDescription200ResponseModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWorkflowNodeDescription.');
        }

        if (requestParameters.workflowNodeName === null || requestParameters.workflowNodeName === undefined) {
            throw new runtime.RequiredError('workflowNodeName','Required parameter requestParameters.workflowNodeName was null or undefined when calling getWorkflowNodeDescription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workflows/{id}/{workflowNodeName}/description`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters.workflowNodeName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWorkflowNodeDescription200ResponseModelFromJSON(jsonValue));
    }

    /**
     * Get an action description shown in the editor.
     * Get an action description shown in the editor
     */
    async getWorkflowNodeDescription(requestParameters: GetWorkflowNodeDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetWorkflowNodeDescription200ResponseModel> {
        const response = await this.getWorkflowNodeDescriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get dynamic properties for an action or trigger property shown in the editor.
     * Get dynamic properties for an action or trigger property shown in the editor
     */
    async getWorkflowNodeDynamicPropertiesRaw(requestParameters: GetWorkflowNodeDynamicPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PropertyModel>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWorkflowNodeDynamicProperties.');
        }

        if (requestParameters.workflowNodeName === null || requestParameters.workflowNodeName === undefined) {
            throw new runtime.RequiredError('workflowNodeName','Required parameter requestParameters.workflowNodeName was null or undefined when calling getWorkflowNodeDynamicProperties.');
        }

        if (requestParameters.propertyName === null || requestParameters.propertyName === undefined) {
            throw new runtime.RequiredError('propertyName','Required parameter requestParameters.propertyName was null or undefined when calling getWorkflowNodeDynamicProperties.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workflows/{id}/{workflowNodeName}/properties/{propertyName}/dynamic-properties`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters.workflowNodeName))).replace(`{${"propertyName"}}`, encodeURIComponent(String(requestParameters.propertyName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PropertyModelFromJSON));
    }

    /**
     * Get dynamic properties for an action or trigger property shown in the editor.
     * Get dynamic properties for an action or trigger property shown in the editor
     */
    async getWorkflowNodeDynamicProperties(requestParameters: GetWorkflowNodeDynamicPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PropertyModel>> {
        const response = await this.getWorkflowNodeDynamicPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an action or trigger property options shown in the editor.
     * Get an action or trigger property options shown in the editor
     */
    async getWorkflowNodeOptionsRaw(requestParameters: GetWorkflowNodeOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OptionModel>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWorkflowNodeOptions.');
        }

        if (requestParameters.workflowNodeName === null || requestParameters.workflowNodeName === undefined) {
            throw new runtime.RequiredError('workflowNodeName','Required parameter requestParameters.workflowNodeName was null or undefined when calling getWorkflowNodeOptions.');
        }

        if (requestParameters.propertyName === null || requestParameters.propertyName === undefined) {
            throw new runtime.RequiredError('propertyName','Required parameter requestParameters.propertyName was null or undefined when calling getWorkflowNodeOptions.');
        }

        const queryParameters: any = {};

        if (requestParameters.searchText !== undefined) {
            queryParameters['searchText'] = requestParameters.searchText;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workflows/{id}/{workflowNodeName}/properties/{propertyName}/options`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters.workflowNodeName))).replace(`{${"propertyName"}}`, encodeURIComponent(String(requestParameters.propertyName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OptionModelFromJSON));
    }

    /**
     * Get an action or trigger property options shown in the editor.
     * Get an action or trigger property options shown in the editor
     */
    async getWorkflowNodeOptions(requestParameters: GetWorkflowNodeOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OptionModel>> {
        const response = await this.getWorkflowNodeOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get dynamic output schema of an action task or trigger used in a workflow.
     * Get dynamic output schema of an action task or trigger used in a workflow
     */
    async getWorkflowNodeOutputRaw(requestParameters: GetWorkflowNodeOutputRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowNodeOutputModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWorkflowNodeOutput.');
        }

        if (requestParameters.workflowNodeName === null || requestParameters.workflowNodeName === undefined) {
            throw new runtime.RequiredError('workflowNodeName','Required parameter requestParameters.workflowNodeName was null or undefined when calling getWorkflowNodeOutput.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workflows/{id}/outputs/{workflowNodeName}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"workflowNodeName"}}`, encodeURIComponent(String(requestParameters.workflowNodeName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowNodeOutputModelFromJSON(jsonValue));
    }

    /**
     * Get dynamic output schema of an action task or trigger used in a workflow.
     * Get dynamic output schema of an action task or trigger used in a workflow
     */
    async getWorkflowNodeOutput(requestParameters: GetWorkflowNodeOutputRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowNodeOutputModel> {
        const response = await this.getWorkflowNodeOutputRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all dynamic output schemas used in a workflow.
     * Get all dynamic output schemas used in a workflow
     */
    async getWorkflowNodeOutputsRaw(requestParameters: GetWorkflowNodeOutputsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkflowNodeOutputModel>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWorkflowNodeOutputs.');
        }

        const queryParameters: any = {};

        if (requestParameters.lastWorkflowNodeName !== undefined) {
            queryParameters['lastWorkflowNodeName'] = requestParameters.lastWorkflowNodeName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/workflows/{id}/outputs`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkflowNodeOutputModelFromJSON));
    }

    /**
     * Get all dynamic output schemas used in a workflow.
     * Get all dynamic output schemas used in a workflow
     */
    async getWorkflowNodeOutputs(requestParameters: GetWorkflowNodeOutputsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkflowNodeOutputModel>> {
        const response = await this.getWorkflowNodeOutputsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
